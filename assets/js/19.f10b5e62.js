(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{596:function(t,e,a){"use strict";a.r(e);var s=a(10),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"git-实战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-实战"}},[t._v("#")]),t._v(" git 实战")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Imageimage-20211127180601456.png",alt:"image-20211127180601456"}}),t._v(" "),a("ol",[a("li",[t._v("创建文件夹    "),a("code",[t._v("mkdir fileName")])]),t._v(" "),a("li",[t._v("进入文件夹 "),a("code",[t._v("cd fileName")])]),t._v(" "),a("li",[t._v("初始化 "),a("code",[t._v("git init")])]),t._v(" "),a("li",[t._v("登录\n"),a("code",[t._v('git config --global user.name "xxx"')]),t._v(" "),a("code",[t._v('git config --global user.email "xxxx@qq.com"')])]),t._v(" "),a("li",[t._v("链接远程仓库\n"),a("code",[t._v("git remote add origin 远程仓库地址")]),t._v(" "),a("code",[t._v("git remote add origin")]),t._v(" https://gitee.com/Sinlon/front-end-of-prawn 、")]),t._v(" "),a("li",[t._v("拉取远程分支到本地："),a("code",[t._v("git fetch origin dev(dev是你要拉取的远程分支名称)")])]),t._v(" "),a("li",[t._v("在本地创建dev分支并且切换到该分支："),a("code",[t._v("git checkout -b dev(本地分支名称)")])]),t._v(" "),a("li",[t._v("拉取分支到本地："),a("code",[t._v("git pull origin dev(远程分支名称)")])]),t._v(" "),a("li",[t._v("安装配置 "),a("code",[t._v("cnpm install")])]),t._v(" "),a("li",[t._v("创建主分支并切换到主分支 "),a("code",[t._v("git checkout -b master")])]),t._v(" "),a("li",[t._v("拉取远程主分支到本地 "),a("code",[t._v("git fetch origin master")])]),t._v(" "),a("li",[t._v("拉取主分支到本地 "),a("code",[t._v("git pull origin master")])]),t._v(" "),a("li",[t._v("在主分支上提交 "),a("code",[t._v("git pull")])]),t._v(" "),a("li",[t._v("切换到自身分支(dev为自身分支) "),a("code",[t._v("`git checkout dev`")])]),t._v(" "),a("li",[t._v("合并主分支到自身分支上 "),a("code",[t._v("git merge master")]),t._v(" "),a("font",{attrs:{color:"orange"}},[a("code",[t._v("merge")]),t._v("后为想要合并的分支名")])],1),t._v(" "),a("li",[t._v("填充项目")]),t._v(" "),a("li",[t._v("一次性把修改的代码放到版本库里 "),a("code",[t._v('git commit --all -m "一些说明"')])]),t._v(" "),a("li",[t._v("设置本地分支追踪远程分支 "),a("code",[t._v("git push --set-upstream origin dev")])]),t._v(" "),a("li",[t._v("提交入远程仓库 "),a("code",[t._v("git push")])])]),t._v(" "),a("h3",{attrs:{id:"什么是head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是head"}},[t._v("#")]),t._v(" 什么是HEAD")]),t._v(" "),a("p",[t._v("在执行"),a("code",[t._v("git init")]),t._v("后，会在项目根目录下创建一个"),a("code",[t._v(".git")]),t._v("文件，此文件存储着对这个项目进行版本控制的所有信息")]),t._v(" "),a("p",[a("font",{attrs:{color:"orange"}},[a("code",[t._v("./git/refs/heads/")]),t._v(" 文件夹存储着当前项目的所有分支的头指针，每一个头指针都指向该分支的最新提交。")])],1),t._v(" "),a("p",[t._v("HEAD指针 ——–> 分支指针 ——–> 最新提交")]),t._v(" "),a("p",[a("font",{attrs:{color:"orange"}},[t._v("HEAD 的本质不是提向分支,而是指向 "),a("code",[t._v("commit")]),t._v(" 提交。")])],1),t._v(" "),a("p",[t._v("HEAD也有可能不用通过分支中转而是直接指向最新提交，但会进入一种特殊的状态 "),a("code",[t._v("detached HEAD")]),t._v("。当 HEAD 指针直接指向提交时，就会导致 "),a("code",[t._v("detached HEAD")]),t._v(" 状态。在这个状态下，如果创建了新提交，新提交不属于任何分支。相对应的，现存的所有分支也不会受 "),a("code",[t._v("detached HEAD")]),t._v(" 状态提交的影响。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout <commit id> //将HEAD切换到指定的提交ID HASH\ngit checkout --detach    //进入detached HEAD 状态。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Imageimage-20211127185749908.png",alt:"image-20211127185749908"}}),t._v(" "),a("h3",{attrs:{id:"需求方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需求方法"}},[t._v("#")]),t._v(" 需求方法")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image640",alt:"图片"}}),t._v(" "),a("h4",{attrs:{id:"在工作区修改后反悔如何将暂存区的内容覆盖还原work-dir的内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在工作区修改后反悔如何将暂存区的内容覆盖还原work-dir的内容"}},[t._v("#")]),t._v(" 在工作区修改后反悔如何将暂存区的内容覆盖还原work dir的内容")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout .  // .代表通配符，将所有暂存区内容覆盖work dir 区域内容\ngit checkout a.txt  //指定文件还原\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("font",{attrs:{color:"orange"}},[t._v("注意")])],1),t._v(" "),a("ul",[a("li",[t._v("如果在工作目录新建了文件，是无法通过此命令而删除新增加的文件")]),t._v(" "),a("li",[t._v("此命令无法还原，在执行前确保"),a("code",[t._v("work dir")]),t._v(" 的修改可以抛弃")])]),t._v(" "),a("h4",{attrs:{id:"在提交文件时-有时候我们刚刚commit提交完-这时发现漏掉了几个文件没有添加-或者可能提交信息写错了-想要修改提交信息或者新增提交文件但又不想因此新建个commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在提交文件时-有时候我们刚刚commit提交完-这时发现漏掉了几个文件没有添加-或者可能提交信息写错了-想要修改提交信息或者新增提交文件但又不想因此新建个commit"}},[t._v("#")]),t._v(" 在提交文件时，有时候我们刚刚"),a("code",[t._v("commit")]),t._v("提交完，这时发现漏掉了几个文件没有添加，或者可能提交信息写错了，想要修改提交信息或者新增提交文件但又不想因此新建个commit")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git add .   \ngit commit --amend   //会将缓存区中的文件提交。做完上次提交后，如果发有未提交的文件，可以将其添加到缓存区，再执行此命令修改提交信息即可。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h4",{attrs:{id:"将history区的文件还原到stage区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将history区的文件还原到stage区"}},[t._v("#")]),t._v(" 将history区的文件还原到stage区")]),t._v(" "),a("p",[t._v("即当进行了 "),a("code",[t._v("git add .")]),t._v("命令后发现还有文件未完善，想还原stage内容，可以通过将"),a("code",[t._v("history")]),t._v("的内容覆盖到"),a("code",[t._v("stage")]),t._v("上实现还原")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git reset a.txt    //指定还原文件  简写\ngit reset --mixed HEAD a.txt\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("该命令的自然语言描述是：不改变"),a("code",[t._v("work dir")]),t._v("中的任何数据，将"),a("code",[t._v("stage")]),t._v("区域中的"),a("code",[t._v("a.txt")]),t._v("文件还原成"),a("code",[t._v("HEAD")]),t._v("指向的"),a("code",[t._v("commit history")]),t._v("中的样子。就相当于把对"),a("code",[t._v("a.txt")]),t._v("的修改从"),a("code",[t._v("stage")]),t._v("区撤销，但依然保存在"),a("code",[t._v("work dir")]),t._v("中，变为"),a("code",[t._v("unstage")]),t._v("的状态。")]),t._v(" "),a("p",[t._v("进行此操作前确定stage区域的文件可以抛弃")]),t._v(" "),a("h4",{attrs:{id:"将history的内容还原到工作目录中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将history的内容还原到工作目录中"}},[t._v("#")]),t._v(" 将history的内容还原到工作目录中")]),t._v(" "),a("p",[t._v("比如从 GitHub 上"),a("code",[t._v("clone")]),t._v("了一个项目，然后乱改了一通代码，结果发现我写的代码根本跑不通，于是后悔了，干脆不改了，我想恢复成最初的模样，怎么办？")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout HEAD .\t  \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这样，work dir和stage中所有的「修改」都会被撤销，恢复成"),a("code",[t._v("HEAD")]),t._v("指向的那个"),a("code",[t._v("history commit")]),t._v("。")]),t._v(" "),a("p",[t._v("注意，类似之前通过"),a("code",[t._v("stage")]),t._v("恢复"),a("code",[t._v("work dir")]),t._v("的"),a("code",[t._v("checkout")]),t._v("命令，这里撤销的也只是修改，新增的文件不会被撤销。")]),t._v(" "),a("p",[t._v("当然，只要找到任意一个commit的 HASH 值，checkout命令可就以将文件恢复成任一个history commit中的样子：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git checkout 2bdf04a some_test.go\nUpdated 1 path from 2bdf04a\ngit log  //可以查看提交历史\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("比如，我改了某个测试文件，结果发现测试跑不过了，所以就把该文件恢复到了它能跑过的那个历史版本……")]),t._v(" "),a("p",[a("font",{attrs:{color:"orange"}},[t._v("此操作会覆盖"),a("code",[t._v("work dir")]),t._v(" 内容，无法还原，执行前确认"),a("code",[t._v("work dir")]),t._v(" 的文件可以抛弃")])],1),t._v(" "),a("h3",{attrs:{id:"其他技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他技巧"}},[t._v("#")]),t._v(" 其他技巧")]),t._v(" "),a("h4",{attrs:{id:"合并多个commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并多个commit"}},[t._v("#")]),t._v(" 合并多个commit")]),t._v(" "),a("p",[t._v("比如说我本地从"),a("code",[t._v("17bd20c")]),t._v("到"),a("code",[t._v("HEAD")]),t._v("有多个"),a("code",[t._v("commit")]),t._v("，但我希望把他们合并成一个"),a("code",[t._v("commit")]),t._v("推到远程仓库，这时候就可以使用"),a("code",[t._v("reset")]),t._v("命令：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git reset 17bd20c\n$ git add .\n$ git commit -m 'balabala'\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("font",{attrs:{color:"orange"}},[t._v("回顾一下刚才说的"),a("code",[t._v("reset")]),t._v("命令的作用，相当于把 HEAD 移到了"),a("code",[t._v("17bd20c")]),t._v("这个"),a("code",[t._v("commit")]),t._v("，而且不会修改"),a("code",[t._v("work dir")]),t._v("中的数据，所以只要"),a("code",[t._v("add")]),t._v("再"),a("code",[t._v("commit")]),t._v("，就相当于把中间的多个"),a("code",[t._v("commit")]),t._v("合并到一个了。")]),t._v("\n即从 17bd20c 提交 到 最新的分支提交这部分的提交合并")],1),t._v(" "),a("h4",{attrs:{id:"需求二-由于head指针的回退-导致有的commit在git-log命令中无法看到-怎么得到它们的-hash-值呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需求二-由于head指针的回退-导致有的commit在git-log命令中无法看到-怎么得到它们的-hash-值呢"}},[t._v("#")]),t._v(" "),a("strong",[t._v("需求二，由于"),a("code",[t._v("HEAD")]),t._v("指针的回退，导致有的"),a("code",[t._v("commit")]),t._v("在"),a("code",[t._v("git log")]),t._v("命令中无法看到，怎么得到它们的 Hash 值呢")]),t._v("？")]),t._v(" "),a("p",[t._v("再重复一遍，只要你不乱动本地的"),a("code",[t._v(".git")]),t._v("文件夹，任何修改只要提交到"),a("code",[t._v("commit history")]),t._v("中，都永远不会丢失，看不到某些"),a("code",[t._v("commit")]),t._v("只是因为它们不是我们当前"),a("code",[t._v("HEAD")]),t._v("位置的「历史」提交，我们可以使用如下命令查看操作记录：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git reflog  //查看所有提交信息hash\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("比如"),a("code",[t._v("reset")]),t._v("，"),a("code",[t._v("checkout")]),t._v("等等关键操作都会在这里留下记录，所有"),a("code",[t._v("commit")]),t._v("的 Hash 值都能在这里找到，所以如果你发现有哪个"),a("code",[t._v("commit")]),t._v("突然找不到了，一定都可以在这里找到。")]),t._v(" "),a("h3",{attrs:{id:"git问题及其解决方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git问题及其解决方法"}},[t._v("#")]),t._v(" Git问题及其解决方法")]),t._v(" "),a("h4",{attrs:{id:"本地创建项目再在码云创建仓库导致的无法合并推送的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地创建项目再在码云创建仓库导致的无法合并推送的问题"}},[t._v("#")]),t._v(" 本地创建项目再在码云创建仓库导致的无法合并推送的问题")]),t._v(" "),a("p",[t._v("正常应该先创建仓库，初始化连接后再在相应文件创建项目")]),t._v(" "),a("h4",{attrs:{id:"问题原因-解决步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题原因-解决步骤"}},[t._v("#")]),t._v(" 问题原因&解决步骤")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("因为本地的仓库和远程的实际上是两个不同的仓库，执行如下命令忽略合并")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git pull origin master --allow-unrelated-histories (该选项可以合并两个独立启动仓库的历史)\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("如果通过克隆的方式建立起本地仓库则不会有此问题")])]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Imageimage-20211025151647990.png",alt:"image-20211025151647990"}})])]),t._v(" "),a("h4",{attrs:{id:"如何在本地初始化一个仓库-然后将代码提交至码云或者github"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何在本地初始化一个仓库-然后将代码提交至码云或者github"}},[t._v("#")]),t._v(" 如何在本地初始化一个仓库，然后将代码提交至码云或者GitHub")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('mkdir fileName\t//新建文件夹\ncd fileName     //进入文件\ngit init\t    //初始化git\ngit remote add origin     //你需要提交的仓库地址\n// 接下去，进入你已经初始化好的目录，然后执行下面的命令，当然也可以先不执行： \n$ git pull origin master  取回远程仓库的变化，并与本地分支合并\n//修改/添加文件，否则与原文件相比就没有变动。\n$ git add .\n$ git commit -m "第一次提交"\t\t//合并分支\n$ git push origin master\t //推送\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[a("font",{attrs:{color:"orange"}},[t._v("在新建仓库时，如果在仓库上已经存在 readme 或其他文件，在提交时可能会存在冲突，这时用户需要选择的是保留线上的文件或者舍弃线上的文件，如果您舍弃线上的文件，则在推送时选择强制推送，强制推送需要执行下面的命令(默认不推荐该行为)")])],1),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push origin master -f\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("如果您选择保留线上的 readme 文件,则需要先执行：")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git pull origin master\t//拉取合并、推送")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"git-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" git rebase")]),t._v(" "),a("p",[a("code",[t._v("git pull")]),t._v("将以"),a("code",[t._v("merge")]),t._v("远程分支拉到本地，如果使用 "),a("code",[t._v("git pull -r")]),t._v("，会以 "),a("code",[t._v("rebase")]),t._v("方式拉取远程修改到本地，"),a("font",{attrs:{color:"orange"}},[a("code",[t._v("merge")]),t._v("方式合并的分支会有很多「分叉」，而"),a("code",[t._v("rebase")]),t._v("方式合并的分支就是一条直线。")])],1),t._v(" "),a("h4",{attrs:{id:"git-rebase实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase实现方式"}},[t._v("#")]),t._v(" git rebase实现方式")]),t._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Imageimage-20211128164850930.png",alt:"image-20211128164850930"}}),t._v(" "),a("ul",[a("li",[a("code",[t._v("git rebase master")]),t._v(" 在哪个分支执行此命令，就会将该分支接到"),a("code",[t._v("master")]),t._v("分支上。")]),t._v(" "),a("li",[t._v("而"),a("code",[t._v("master")]),t._v("分支又会接到该分支和"),a("code",[t._v("master")]),t._v("分支的最近公共祖先（LCA）上，如果有冲突，会提示解决冲突。")])]),t._v(" "),a("h4",{attrs:{id:"假设git目前只有一个分支master。开发人员的工作流程是"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#假设git目前只有一个分支master。开发人员的工作流程是"}},[t._v("#")]),t._v(" 假设Git目前只有一个分支master。开发人员的工作流程是")]),t._v(" "),a("ul",[a("li",[t._v("git clone master branch 从项目地址克隆连接仓库")]),t._v(" "),a("li",[t._v("在自己本地"),a("code",[t._v("checkout -b local")]),t._v("创建一个本地开发分支")]),t._v(" "),a("li",[t._v("在本地的开发分支上开发和测试")]),t._v(" "),a("li",[t._v("阶段性开发完成后（包含功能代码和单元测试），可以准备提交代码\n"),a("ul",[a("li",[t._v("首先切换到master分支，git pull拉取最新的分支状态\n然后切回local分支")]),t._v(" "),a("li",[t._v("通过"),a("code",[t._v("git rebase -i")]),t._v(" 将本地的多次提交合并为一个，以简化提交历史。本地有多个提交时,如果不进行这一步,在git rebase master时会多次解决冲突(最坏情况下,每一个提交都会相应解决一个冲突) "),a("font",{attrs:{color:"orange"}},[t._v("合并本地提交")])],1),t._v(" "),a("li",[t._v("git rebase master 将master最新的分支同步到本地，这个过程可能需要手动解决冲突(如果进行了上一步的话,只用解决一次冲突) "),a("font",{attrs:{color:"orange"}},[t._v("将主分支和本地分支合并")])],1),t._v(" "),a("li",[t._v("然后切换到master分支，git merge将本地的local分支内容合并到master分支")]),t._v(" "),a("li",[t._v("git push将master分支的提交上传")])])])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  git rebase -i  [startpoint]  [endpoint]\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("其中"),a("code",[t._v("-i")]),t._v("的意思是"),a("code",[t._v("--interactive")]),t._v("，即弹出交互式的界面让用户编辑完成合并操作，"),a("code",[t._v("[startpoint]")]),t._v(" "),a("code",[t._v("[endpoint]")]),t._v("则指定了一个编辑区间，"),a("font",{attrs:{color:"orange"}},[t._v("如果不指定"),a("code",[t._v("[endpoint]")]),t._v("，则该区间的终点默认是当前分支"),a("code",[t._v("HEAD")]),t._v("所指向的"),a("code",[t._v("commit")]),t._v("(注：该区间指定的是一个前开后闭的区间)。")]),t._v("\n在查看到了log日志后，我们运行以下命令：")],1),t._v(" "),a("div",{staticClass:"language-undefined line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git rebase -i HEAD~3 \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("font",{attrs:{color:"orange"}},[t._v("不要通过rebase对任何已经提交到公共仓库中的commit进行修改")])],1)])}),[],!1,null,null,null);e.default=i.exports}}]);