(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{602:function(t,a,s){"use strict";s.r(a);var n=s(10),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"基础知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),s("h2",{attrs:{id:"编码格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编码格式"}},[t._v("#")]),t._v(" 编码格式")]),t._v(" "),s("p",[t._v("视频的基本组成单元一幅幅基本的图像。")]),t._v(" "),s("h4",{attrs:{id:"图像基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图像基本概念"}},[t._v("#")]),t._v(" 图像基本概念")]),t._v(" "),s("p",[t._v("图像分辨率：用于确定组成一副图像的像素数据，就是指在水平和垂直方向上图像所具有的像素个数。如1920*1080（水平方向1920个像素、垂直方向1080个像素）")]),t._v(" "),s("p",[t._v("图像深度︰图像深度是指存储每个像素所需要的比特数。图像深度决定了图像的每个像素可能的颜色数，或可能的灰度级数。例如,\n彩色图像每个像素用R,G,B三个分量表示,每个分量用8位,像素深度为24位可以表示的颜色数目为2的24次方，既16777216个﹔一副单色图像存储每个像素需要8bit，则图像的像素深度为8位，最大灰度数目为2的8次方，既256个.")]),t._v(" "),s("p",[t._v("因此一个图片的分辨率越大不一定所占据的存储空间越大，还要根据其图片深度占用位数。")]),t._v(" "),s("h4",{attrs:{id:"视频的基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#视频的基本概念"}},[t._v("#")]),t._v(" 视频的基本概念")]),t._v(" "),s("ul",[s("li",[t._v("分辨率：每一帧图像的分辨率（所有帧分辨率相同）")]),t._v(" "),s("li",[t._v("帧率：视频单位时间内包含的视频帧的数量")]),t._v(" "),s("li",[t._v("码率：指视频单位时间内传输的数据量，一般用kbps标签，即千位每秒。")])]),t._v(" "),s("h3",{attrs:{id:"视频帧的分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#视频帧的分类"}},[t._v("#")]),t._v(" 视频帧的分类")]),t._v(" "),s("img",{staticStyle:{zoom:"40%"},attrs:{src:"C:\\Users\\underwood\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220126232818274.png",alt:"image-20220126232818274"}}),t._v(" "),s("h4",{attrs:{id:"i帧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i帧"}},[t._v("#")]),t._v(" I帧")]),t._v(" "),s("p",[t._v("I帧对视频压缩编码无需依赖其他的帧，只要有I帧自己的数据就能完全解码")]),t._v(" "),s("h4",{attrs:{id:"p帧-前项预测编码帧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#p帧-前项预测编码帧"}},[t._v("#")]),t._v(" P帧（前项预测编码帧）")]),t._v(" "),s("p",[t._v("其解码要依赖前一帧，前一帧没解码自身也无法解码。")]),t._v(" "),s("h4",{attrs:{id:"b帧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b帧"}},[t._v("#")]),t._v(" B帧")]),t._v(" "),s("p",[t._v("其解码不仅要依赖前一帧，还要根据其后面的帧内容。")]),t._v(" "),s("h4",{attrs:{id:"dts和pts时间戳"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dts和pts时间戳"}},[t._v("#")]),t._v(" dts和pts时间戳")]),t._v(" "),s("p",[t._v("告诉解码器的解码顺序，pts记录的是播放顺序，如果视频帧不包含B帧，其dts和pts是相同的。")]),t._v(" "),s("h3",{attrs:{id:"gop-group-of-picture"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gop-group-of-picture"}},[t._v("#")]),t._v(" GOP(group of picture)")]),t._v(" "),s("p",[s("font",{attrs:{color:"orange"}},[t._v("两个"),s("strong",[t._v("I")]),t._v("帧的间隔")])],1),t._v(" "),s("p",[t._v("I帧采用的是帧内压缩，占用的存储空间更大，如果压缩视频其压缩比比较小。（GOP一般在2~4秒范围）")]),t._v(" "),s("h3",{attrs:{id:"编码的意义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编码的意义"}},[t._v("#")]),t._v(" 编码的意义")]),t._v(" "),s("p",[t._v("为了压缩视频视频大小，为了更好的进行视频传输和节约存储空间。视频是有很多冗余的，包括空间冗余、时间冗余、编码冗余、视觉冗余；如下图很多部分颜色是相同的，我们可以通过记录像素相同部分的值和其重复次数达到节省空间的目的；\n"),s("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202201262337646.png",alt:"image-20220126233704491"}})]),t._v(" "),s("h3",{attrs:{id:"编码流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编码流程"}},[t._v("#")]),t._v(" 编码流程")]),t._v(" "),s("div",{staticClass:"language-mermaid line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-mermaid"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("graph")]),t._v(" LR\nA"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[预测]")]),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("B"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[变换]")]),t._v("\nB"),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("C"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[量化]")]),t._v("\nC"),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("D"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[熵编码]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("ul",[s("li",[t._v("预测：去除空间冗余时间冗余")]),t._v(" "),s("li",[t._v("变换：去除空间冗余")]),t._v(" "),s("li",[t._v("去除视觉冗余")]),t._v(" "),s("li",[t._v("去除编码冗余")])]),t._v(" "),s("img",{staticStyle:{zoom:"57%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202201262341300.png",alt:"image-20220126234111083"}}),t._v(" "),s("h3",{attrs:{id:"具体编码格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#具体编码格式"}},[t._v("#")]),t._v(" 具体编码格式")]),t._v(" "),s("img",{staticStyle:{zoom:"47%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202201262344956.png",alt:"image-20220126234423818"}}),t._v(" "),s("h2",{attrs:{id:"封装格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装格式"}},[t._v("#")]),t._v(" 封装格式")]),t._v(" "),s("p",[t._v("存储音视频、图片或字幕信息的容器，便于存储传输。")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202201262346269.png",alt:"image-20220126234656151"}}),t._v(" "),s("h2",{attrs:{id:"多媒体元素和扩展api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多媒体元素和扩展api"}},[t._v("#")]),t._v(" 多媒体元素和扩展API")]),t._v(" "),s("h3",{attrs:{id:"video和audio元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#video和audio元素"}},[t._v("#")]),t._v(" video和audio元素")]),t._v(" "),s("h4",{attrs:{id:"标签用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标签用法"}},[t._v("#")]),t._v(" 标签用法")]),t._v(" "),s("p",[t._v("​\t\t在h5中，通过可以通过video标签和audio标签分别播放视频和音频。两种标签用法一样。")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--\x3evideo标签写法一<--\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("video")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("./video.mp4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("muted")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("autoplay")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("width")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v("600")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("height")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v("300")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("control")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("video")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--\x3evideo标签写法二<--\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("video")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("muted")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("autoplay")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("width")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v("600")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("height")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v("300")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("control")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("source")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("./video.mp4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("source")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("source")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("./video1.mp4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("source")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\t\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("video")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--\x3e两种写法的主要区别在于视频资源前者是直接写在video标签内，第二种src是写在source标签内。第二种写法video标签内可以写多个source标签，如果第一个source标签的视频不支持就尝试第二个，以此类推直到source所对应的视频是支持播放的<--\x3e")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("h4",{attrs:{id:"标签方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标签方法"}},[t._v("#")]),t._v(" 标签方法")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202201262050569.png",alt:"image-20220126205010480"}}),t._v(" "),s("p",[t._v("其中的play方法是异步的，如果调用play方法后马上调用post方法会发生错误")]),t._v(" "),s("h3",{attrs:{id:"标签属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标签属性"}},[t._v("#")]),t._v(" 标签属性")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202201262051060.png",alt:"image-20220126205117986"}}),t._v(" "),s("h4",{attrs:{id:"video和audio标签的缺陷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#video和audio标签的缺陷"}},[t._v("#")]),t._v(" video和audio标签的缺陷")]),t._v(" "),s("ul",[s("li",[t._v("不支持直接播放hls、flv等格式视频")]),t._v(" "),s("li",[t._v("视频资源的请求和加载无法通过代码控制\n"),s("ul",[s("li",[t._v("分段加载（节约流量）")]),t._v(" "),s("li",[t._v("清晰度无缝切换（增强用户体验）")]),t._v(" "),s("li",[t._v("精确预加载（增强用户体验）")])])])]),t._v(" "),s("h3",{attrs:{id:"媒体源扩展api-mse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#媒体源扩展api-mse"}},[t._v("#")]),t._v(" 媒体源扩展API（MSE）")]),t._v(" "),s("ul",[s("li",[t._v("无插件在web端播放流媒体")]),t._v(" "),s("li",[t._v("支持播放hls、flv、mp4等格式视频")]),t._v(" "),s("li",[t._v("可实现视频分段加载、清晰度无缝切换、自适应码率、精确预加载等")]),t._v(" "),s("li",[t._v("基本浏览器都支持MSE，除了Safari。")])]),t._v(" "),s("h4",{attrs:{id:"mse使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mse使用"}},[t._v("#")]),t._v(" MSE使用")]),t._v(" "),s("ol",[s("li",[t._v("创建mediaSource实例")]),t._v(" "),s("li",[t._v("创建指向mediaSource的URL")]),t._v(" "),s("li",[t._v("监听sourceopen事件")]),t._v(" "),s("li",[t._v("创建sourceBuffer")]),t._v(" "),s("li",[t._v("向sourceBuffer中加入数据")]),t._v(" "),s("li",[t._v("监听updateend事件")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" video "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'video'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" mineCodec "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'video/mp4; codecs=\"avc1.4201E, mp4a.40.2\"'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//描述视频相关参数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" mediaSource "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("mediaSource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建mediaSource实例")]),t._v("\nvideo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createObejctURL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mediaSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建指向mediaSource的URL")]),t._v("\nmediaSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sourceopen'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t\t  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//监听sourceopen事件")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" mediaSource "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sourceBuffer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mediaSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addSourceBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mineCodec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建sourceBuffer")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetchVideoSource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'frag_bunny.mp4'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("buf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sourceBuffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'updateend'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            mediaSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("endOfStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            video"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("play")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        sourceBuffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fetchVideoSource")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" xhr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    xhr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'get'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    xhr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'arraybuffer'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    xhr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onload")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    xhr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// webm MIME-type\n'video/webm;codecs=\"vp8,vorbis\"'\n\n// fmp4 MIME-type\n'video/mp4;codecs=\"avc1.42E01E,mp4a.40.2\"'\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("这段字符串描述了视频的相关参数，如封装格式、音/视频编码格式以及其余重要信息。以上面 mp4 这段为例，以 "),s("code",[t._v(";")]),t._v(" 分为两部分：")]),t._v(" "),s("ul",[s("li",[t._v("前半部分的 "),s("code",[t._v("video/mp4")]),t._v(" 表示这是 mp4 格式的视频；")]),t._v(" "),s("li",[t._v("后半部分的 "),s("code",[t._v("codecs")]),t._v(" 描述了视频的编码信息，它是由一个或多个由 "),s("code",[t._v(",")]),t._v(" 分隔的值组成，其中每一个值又由一个或多个由 "),s("code",[t._v(".")]),t._v(" 分割的元素组成：\n"),s("ul",[s("li",[s("code",[t._v("avc1")]),t._v(" 表示视频是 "),s("code",[t._v("AVC")]),t._v("（即H264）编码;")]),t._v(" "),s("li",[s("code",[t._v("42E01E")]),t._v(" 由（16进制表示的）三个字节构成，描述了视频的相关信息：\n"),s("ul",[s("li",[s("code",[t._v("0x42")]),t._v(" （"),s("code",[t._v("AVCProfileIndication")]),t._v("）表示视频的"),s("a",{attrs:{href:"https://blog.pearce.org.nz/2013/11/what-does-h264avc1-codecs-parameters.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Profile"),s("OutboundLink")],1),t._v("，常见的有 Baseline/Extended/Main/High profile等；")]),t._v(" "),s("li",[s("code",[t._v("0xE0")]),t._v(" （"),s("code",[t._v("profile_compatibility")]),t._v("）表示编码级别的约束条件；")]),t._v(" "),s("li",[s("code",[t._v("0x1E")]),t._v(" （"),s("code",[t._v("AVCLevlIndication")]),t._v("）表示H264的"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Advanced_Video_Coding#Levels",target:"_blank",rel:"noopener noreferrer"}},[t._v("level"),s("OutboundLink")],1),t._v("，表示最大支持的分辨率、帧率、码率等；")])])]),t._v(" "),s("li",[s("code",[t._v("mp4a")]),t._v(" 表示某种 "),s("code",[t._v("MPEG-4")]),t._v(" 音频；")]),t._v(" "),s("li",[s("code",[t._v("40")]),t._v(" 是由"),s("a",{attrs:{href:"http://mp4ra.org/#/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MP4注册机构"),s("OutboundLink")],1),t._v("指定的ObjectTypeIndication（OTI），"),s("code",[t._v("0x40")]),t._v(" 对应 "),s("code",[t._v("Audio ISO/IEC 14496-3 (d)")]),t._v("标准；")]),t._v(" "),s("li",[s("code",[t._v("2")]),t._v(" 表示某种音频OTI，"),s("code",[t._v("mp4a.40.2")]),t._v(" 表示 "),s("code",[t._v("AAC LC")]),t._v("。")])])])]),t._v(" "),s("h4",{attrs:{id:"直接获取视频的mine-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接获取视频的mine-type"}},[t._v("#")]),t._v(" 直接获取视频的MINE TYPE")]),t._v(" "),s("div",{staticClass:"language-typescript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// utils.ts")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// yarn add mp4box")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" MP4Box "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mp4box'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMimeType")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ArrayBuffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Promise")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" mp4boxfile "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MP4Box"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    mp4boxfile"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onReady")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("info"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    mp4boxfile"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onError")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fileStart "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    mp4boxfile"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("p",[s("code",[t._v("MIME TYPE")]),t._v(" 获取到后，能够经过 MSE 的静态方法 "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/isTypeSupported",target:"_blank",rel:"noopener noreferrer"}},[t._v("MediaSource.isTypeSupported()"),s("OutboundLink")],1),t._v(" 检测当前浏览器是否支持该媒体格式。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { getMimeType } from './utils';\n\n\n\nconst mime = await getMimeType(buffer);\nif (!MediaSource.isTypeSupported(mime)) {\n  throw new Error('mimetype not supported');\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("参考链接：https://github.com/shushushv/Front-End-Media/tree/master/MSE/Introduction")]),t._v(" "),s("h4",{attrs:{id:"mse播放流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mse播放流程"}},[t._v("#")]),t._v(" MSE播放流程")]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202201262215604.png",alt:"image-20220126221545444"}}),t._v(" "),s("p",[t._v("​\t\t可以将音频和视频放在同一个"),s("code",[t._v("sourceBuffer")]),t._v("，再进行解封装，把音频和视频分别放到不同的"),s("code",[t._v("buffer")]),t._v("，最后进行解码渲染同步播放。也可以直接将音频和视频放在不同的sourceBuffer，各自进行解封装。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202201262219957.png",alt:"image-20220126221929801"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202201262222862.png",alt:"image-20220126222209680"}})]),t._v(" "),s("ul",[s("li",[t._v("资源的数据格式通常为ts、flv、MP4，内部编码通常为"),s("code",[t._v("h264")]),t._v("。")]),t._v(" "),s("li",[s("font",{attrs:{color:"orange"}},[t._v("重封装是指将音视频流重封装成MSE 支持的媒体格式和音视频格式，通常为fmp4（h264视频编码+aac音频，一种面向对象的格式）或webm(字节流格式)")])],1)]),t._v(" "),s("h4",{attrs:{id:"mp4和fmp4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mp4和fmp4"}},[t._v("#")]),t._v(" mp4和fmp4")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202201262234538.png",alt:"image-20220126223428431"}}),t._v(" "),s("p",[t._v("​\t\tfmp4文件结构相比普通的MP4文件多了多个"),s("code",[t._v("moof")]),t._v("和"),s("code",[t._v("moot")]),t._v("文件，因此对流式播放支持得更加友好")]),t._v(" "),s("h3",{attrs:{id:"流媒体协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流媒体协议"}},[t._v("#")]),t._v(" 流媒体协议")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("协议名称")]),t._v(" "),s("th",[t._v("传输协议")]),t._v(" "),s("th",[t._v("封装格式")]),t._v(" "),s("th",[t._v("HTML5")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("HLS")]),t._v(" "),s("td",[t._v("HTTP")]),t._v(" "),s("td",[t._v("M3U8/TS")]),t._v(" "),s("td",[t._v("支持")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("HTTP-FLV")]),t._v(" "),s("td",[t._v("HTTP")]),t._v(" "),s("td",[t._v("FLV")]),t._v(" "),s("td",[t._v("支持")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Dash")]),t._v(" "),s("td",[t._v("HTTP")]),t._v(" "),s("td",[t._v("FMP4")]),t._v(" "),s("td",[t._v("支持")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("RTMP")]),t._v(" "),s("td",[t._v("TCP")]),t._v(" "),s("td",[t._v("FLV")]),t._v(" "),s("td",[t._v("不支持")])])])]),t._v(" "),s("h4",{attrs:{id:"hls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hls"}},[t._v("#")]),t._v(" hls")]),t._v(" "),s("p",[t._v("​\t\tHLS全称是HTTP Live Streaming，是一个由Apple公司提出的基于HTTP的媒体流传输协议，用于实时音视频流的传输。目前HLS协议被广泛的应用于视频点播和直播领域。在IOS段，只要把M3U8的地址直接赋给video标签的src，就可以直接播放。")]),t._v(" "),s("h5",{attrs:{id:"hls播放流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hls播放流程"}},[t._v("#")]),t._v(" hls播放流程")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202201262240922.png",alt:"image-20220126224051854"}}),t._v(" "),s("ol",[s("li",[t._v("数据采集")]),t._v(" "),s("li",[t._v("数据编码成fmp4格式")]),t._v(" "),s("li",[t._v("数据上传到server进行分发")]),t._v(" "),s("li",[t._v("客户端进行拉流播放")])]),t._v(" "),s("h5",{attrs:{id:"m3u8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#m3u8"}},[t._v("#")]),t._v(" m3u8")]),t._v(" "),s("p",[t._v("​\t\t"),s("font",{attrs:{color:"orange"}},[t._v("m3u8是m3u文件的一种，只不过其内部编码格式是UTF-8。m3u8准确来说是一种索引文件，**使用m3u8文件实际上是通过它来解析对应的放在服务器上的视频网络地址，从而实现在线播放。**使用m3u8格式文件主要因为可以实现多码率视频的适配，视频网站可以根据用户的网络带宽情况，自动为客户端匹配一个合适的码率文件进行播放，从而保证视频的流畅度。")])],1),t._v(" "),s("h6",{attrs:{id:"m3u文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#m3u文件"}},[t._v("#")]),t._v(" m3u文件")]),t._v(" "),s("p",[t._v("M3U文件的大小很小，也就是因为它里面没有任何音频数据。把M3U文件直接转换为音频文件是不可能的，除非你把它指向的音频文件下载下来再作处理。")]),t._v(" "),s("p",[t._v("m3u格式的文件只是存储多媒体播放列表，提供了一个指向其他位置的音频视频文件的索引，你播放的还是那些被指向的文件，用记事本打开m3u文件可以查看所指向文件的地址及文件的属性，以选用合适播放器播放。m3u存储的媒流体播放列表为主媒流体播放列表，存放了多个媒流体列表（包含着每一个分片的信息（如分片序号，时长））")]),t._v(" "),s("p",[t._v("m3u8基本分为两类，一种是主播放列表格式，其内部的包含的是媒流体播放列表，存放每一个分片的信息（如分片序号，时长）")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202201262246417.png",alt:"image-20220126224648268"}}),t._v(" "),s("h2",{attrs:{id:"应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),s("p",[t._v("Web多媒体：视频编辑、点播、直播、图片、云游戏、实时通信、")]),t._v(" "),s("h3",{attrs:{id:"点播"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#点播"}},[t._v("#")]),t._v(" 点播")]),t._v(" "),s("ol",[s("li",[t._v("视频上传")]),t._v(" "),s("li",[t._v("视频转码（转成不同码率：1080P、720P、360P）")]),t._v(" "),s("li",[t._v("资源分发到CDN")]),t._v(" "),s("li",[t._v("需要观看视频时再通过CDN进行拉流")])]),t._v(" "),s("h3",{attrs:{id:"直播和点播的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直播和点播的区别"}},[t._v("#")]),t._v(" 直播和点播的区别")]),t._v(" "),s("p",[t._v("直播对商品数据的实时性要求更高")]),t._v(" "),s("h3",{attrs:{id:"支持更多格式的图片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#支持更多格式的图片"}},[t._v("#")]),t._v(" 支持更多格式的图片")]),t._v(" "),s("p",[t._v("如APNG")]),t._v(" "),s("p",[t._v("在实际开放中，后端会根据浏览器返回的信息判断浏览器支持哪种格式的图片进行返回")]),t._v(" "),s("h3",{attrs:{id:"云游戏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#云游戏"}},[t._v("#")]),t._v(" 云游戏")]),t._v(" "),s("p",[t._v("客户端只是传送指令，服务端接收指令处理后再传视频流会到服务端，对实时性要很高的要求。（要求低于50ms）")]),t._v(" "),s("h2",{attrs:{id:"浏览器处理avi格式视频的流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器处理avi格式视频的流程"}},[t._v("#")]),t._v(" 浏览器处理avi格式视频的流程")]),t._v(" "),s("ol",[s("li",[t._v("把格式视频进行解封装成视频裸流")]),t._v(" "),s("li",[t._v("再重封装成fmp4")]),t._v(" "),s("li",[t._v("fmp4发送到MSE进行播放")])]),t._v(" "),s("h2",{attrs:{id:"新技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新技术"}},[t._v("#")]),t._v(" 新技术")]),t._v(" "),s("p",[t._v("https://blog.csdn.net/chenweiyu11962/article/details/86730031")]),t._v(" "),s("ul",[s("li",[t._v("Webassembly\n为了解析浏览器不支持H265编码的问题，通过用C++写的H265解码库转成wasm（Webassembly）库，在文本、调用进行软解码。")]),t._v(" "),s("li",[t._v("WebCodecs\n前端进行视频编码解码，即暴露的底层的音视频处理接口。")]),t._v(" "),s("li",[t._v("WebGPU\n将底层GPU的操作能力通过WebGPU接口暴露出来，让前端能够通过WebGPU接口调用GPU进行图片渲染处理。")]),t._v(" "),s("li",[t._v("WebVR、WebXR")])]),t._v(" "),s("h2",{attrs:{id:"音频视频通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#音频视频通信"}},[t._v("#")]),t._v(" 音频视频通信")]),t._v(" "),s("p",[t._v("通常采用WebRTC实现")]),t._v(" "),s("h3",{attrs:{id:"webrtc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webrtc"}},[t._v("#")]),t._v(" WebRTC")]),t._v(" "),s("p",[t._v("​\t\tWebRTC是一个由Google发起的实时通讯解决方案，其中包含视频音频采集，编解码，数据传输，音视频展示等功能，我们可以通过技术快速地构建出一个音视频通讯应用。 虽然其名为WebRTC，但是实际上它不光支持Web之间的音视频通讯，还支持Android以及IOS端，此外由于该项目是开源的，我们也可以通过编译C++代码，从而达到全平台的互通。")])])}),[],!1,null,null,null);a.default=e.exports}}]);