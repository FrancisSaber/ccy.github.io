(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{654:function(t,s,o){"use strict";o.r(s);var v=o(10),a=Object(v.a)({},(function(){var t=this,s=t.$createElement,o=t._self._c||s;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h2",{attrs:{id:"单点登录"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#单点登录"}},[t._v("#")]),t._v(" 单点登录")]),t._v(" "),o("h3",{attrs:{id:"概念-sso"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#概念-sso"}},[t._v("#")]),t._v(" 概念-SSO")]),t._v(" "),o("p",[t._v("​\t\t所谓单点登录，就是用户只需要登录一次就可以访问所有"),o("font",{attrs:{color:"orange"}},[t._v("互相信任的应用系统")]),t._v("，无需重复登录。")],1),t._v(" "),o("h3",{attrs:{id:"前置"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#前置"}},[t._v("#")]),t._v(" 前置")]),t._v(" "),o("ul",[o("li",[t._v("浏览器受同源策略限制，限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互，要求协议，端口和主机都相同。")]),t._v(" "),o("li",[t._v("HTTP 用于分布式、协作式和超媒体信息系统的应用层协议。HTTP 是无状态协议，所以服务器单从网络连接上无从知道客户身份。 那要如何才能识别客户端呢？给每个客户端颁发一个通行证，每次访问时都要求带上通行证，这样服务器就可以根据通行证识别客户了。最常见的方案就是 Cookie。")]),t._v(" "),o("li",[t._v("Cookie 是客户端保存用户信息的一种机制，保存在客户机硬盘上。可以由服务器响应报文"),o("code",[t._v("Set-Cookie")]),t._v("的首部字段信息或者客户端 "),o("code",[t._v("document.cookie")]),t._v("来设置，并随着每次请求发送到服务器。子域名可以获取父级域名 Cookie。")]),t._v(" "),o("li",[t._v("Session 其实是一个抽象概念，用于跟踪会话，识别多次 HTTP 请求来自同一个客户端。Cookie 只是通用性较好的一种实现方案，通常是设置一个名为 SessionID（名称可自定义，便于描述，本文均使用此名称）的 Cookie，每次请求时携带该 Cookie，后台服务即可依赖此 SessionID 值识别客户端。")])]),t._v(" "),o("h3",{attrs:{id:"单系统登录"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#单系统登录"}},[t._v("#")]),t._v(" 单系统登录")]),t._v(" "),o("p",[t._v("​\t\t用户发送访问权限页面，服务器判断用户是否登录？如果登录直接返回对应页面信息，如果没有登录重定向到登录页面。用户填写表单信息到服务器，服务器设置cookie（session）或"),o("code",[t._v("jwt")]),t._v("，并重定向到用户想要访问的页面。")]),t._v(" "),o("h4",{attrs:{id:"后台是如何通过-sessionid-知道是哪个用户呢"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#后台是如何通过-sessionid-知道是哪个用户呢"}},[t._v("#")]),t._v(" 后台是如何通过 SessionID 知道是哪个用户呢？")]),t._v(" "),o("ol",[o("li",[t._v("数据库存储关联：将 SessionID 与数据信息关联，存储在 Redis、mysql 等数据库中；")]),t._v(" "),o("li",[t._v("数据加密直接存储：比如 JWT 方式，用户数据直接从 SessionID 值解密出来（此方式时 Cookie 名称以 Token 居多）。")])]),t._v(" "),o("h3",{attrs:{id:"多系统登录问题"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#多系统登录问题"}},[t._v("#")]),t._v(" 多系统登录问题")]),t._v(" "),o("h3",{attrs:{id:"同域名"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#同域名"}},[t._v("#")]),t._v(" 同域名")]),t._v(" "),o("p",[t._v("​\t\t当访问同域名的页面时，登录流程与单系统登录没什么区别。")]),t._v(" "),o("h3",{attrs:{id:"不同子域名"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#不同子域名"}},[t._v("#")]),t._v(" 不同子域名")]),t._v(" "),o("p",[t._v("​\t\t"),o("font",{attrs:{color:"orange"}},[t._v("子域名间的"),o("code",[t._v("token")]),t._v("不共享，但可以通过访问父域名的"),o("code",[t._v("tookie")]),t._v("来实现用户标识。")]),t._v("所以可以通过将 Cookie 设置在父级域名上，可以达到子域名共享的效果。")],1),t._v(" "),o("h3",{attrs:{id:"完全不同域名"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#完全不同域名"}},[t._v("#")]),t._v(" 完全不同域名")]),t._v(" "),o("p",[t._v("​\t\t默认情况下，不同域名是无法直接共享 Cookie 的。")]),t._v(" "),o("h3",{attrs:{id:"cas-中央认证服务"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#cas-中央认证服务"}},[t._v("#")]),t._v(" CAS - 中央认证服务")]),t._v(" "),o("p",[t._v("​\t\tCAS通过跳转中间域名的方式来实现,")]),t._v(" "),o("h3",{attrs:{id:"基本思路"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#基本思路"}},[t._v("#")]),t._v(" 基本思路")]),t._v(" "),o("p",[t._v("​\t\t用户进行请求，业务站点判断用户是否登录，没有登录返回SSO登录页面，用户提交表单后SSO服务，SSO服务通过验证创建SSO的Session，设置cookie，重定向到目标页面，"),o("font",{attrs:{color:":orange"}},[t._v("页面验证SSO信息后去除"),o("code",[t._v("tickiet")]),t._v("信息设置cookie和"),o("code",[t._v("TGC")]),t._v("后返回给用户")]),t._v("，用户端此时就具备了cookie可以成功访问页面。")],1),t._v(" "),o("p",[t._v("​\t\t在用户通过SSO登录后。访问其他信任的应用，就会先在业务站点判断是否登录，没有登录就去SSO站点验证，验证通过返回SSO站点信息，目标站点根据SSO信息验证返回必要属性给用户返回"),o("code",[t._v("cookie")]),t._v("让用户能够通过验证获取页面信息。")]),t._v(" "),o("p",[t._v("​\t\t"),o("font",{attrs:{color:"orange"}},[t._v("用户进行sso登录后得到得"),o("code",[t._v("TGT")]),t._v("在cookie内，之后登录其他应用SSO服务就是通过此值判断用户是否登录过，如果登录过再给用户的请求链接加上"),o("code",[t._v("ticket")]),t._v("重定向，目标站点再去向SSO站点确认，确认成功后为用户设置cookie。")])],1),t._v(" "),o("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202201231215554.webp",alt:"img"}}),t._v(" "),o("img",{staticStyle:{zoom:"70%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202201231148319.webp",alt:"SSO系统设计-登录时序图"}}),t._v(" "),o("h2",{attrs:{id:"描述"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),o("p",[o("strong",[t._v("对于初次登录")])]),t._v(" "),o("ol",[o("li",[t._v("用户访问系统1的资源，系统1发现用户未登录，重定向到SSO认证中心，以系统1地址为参数")]),t._v(" "),o("li",[t._v("SSO认证中心发现用户未登录，会跳转到登录页面，用户输入登录信息后,SSO会创建一个全局会话保存到用户的cookie内，同时创建授权令牌跳转到一开始请求的地址")]),t._v(" "),o("li",[t._v("系统1会携带令牌去SSO认证中心进行校验")]),t._v(" "),o("li",[t._v("验证通过后系统1会根据令牌创建一个局部会话，设置cookie并重定向到系统1，此后用户通过局部会话进行访问")])]),t._v(" "),o("p",[o("strong",[t._v("对于二次访问")])]),t._v(" "),o("p",[t._v("直接使用局部会话进行通信")]),t._v(" "),o("p",[o("strong",[t._v("对于访问其他应用")])]),t._v(" "),o("ol",[o("li",[t._v("当访问系统2，系统2重定向到SSO认证中心")]),t._v(" "),o("li",[t._v("由于已经SSO认证过会携带cookie，SSO发现用户已登录，直接创建令牌重定向到目标页面")]),t._v(" "),o("li",[t._v("目标系统对令牌校验后创建布局会话进行访问")])])])}),[],!1,null,null,null);s.default=a.exports}}]);